// Code generated by Kitex v0.7.3. DO NOT EDIT.

package userservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	user "rpc/kitex_gen/user"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Register":                kitex.NewMethodInfo(registerHandler, newUserServiceRegisterArgs, newUserServiceRegisterResult, false),
		"Login":                   kitex.NewMethodInfo(loginHandler, newUserServiceLoginArgs, newUserServiceLoginResult, false),
		"UserIndex":               kitex.NewMethodInfo(userIndexHandler, newUserServiceUserIndexArgs, newUserServiceUserIndexResult, false),
		"AddFollowCount":          kitex.NewMethodInfo(addFollowCountHandler, newUserServiceAddFollowCountArgs, newUserServiceAddFollowCountResult, false),
		"SubFollowCount":          kitex.NewMethodInfo(subFollowCountHandler, newUserServiceSubFollowCountArgs, newUserServiceSubFollowCountResult, false),
		"GetUserList":             kitex.NewMethodInfo(getUserListHandler, newUserServiceGetUserListArgs, newUserServiceGetUserListResult, false),
		"AddUserWorkCount":        kitex.NewMethodInfo(addUserWorkCountHandler, newUserServiceAddUserWorkCountArgs, newUserServiceAddUserWorkCountResult, false),
		"UpdateUserFavoriteCount": kitex.NewMethodInfo(updateUserFavoriteCountHandler, newUserServiceUpdateUserFavoriteCountArgs, newUserServiceUpdateUserFavoriteCountResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "user",
		"ServiceFilePath": `idl\user.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.3",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceRegisterArgs)
	realResult := result.(*user.UserServiceRegisterResult)
	success, err := handler.(user.UserService).Register(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceRegisterArgs() interface{} {
	return user.NewUserServiceRegisterArgs()
}

func newUserServiceRegisterResult() interface{} {
	return user.NewUserServiceRegisterResult()
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceLoginArgs)
	realResult := result.(*user.UserServiceLoginResult)
	success, err := handler.(user.UserService).Login(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceLoginArgs() interface{} {
	return user.NewUserServiceLoginArgs()
}

func newUserServiceLoginResult() interface{} {
	return user.NewUserServiceLoginResult()
}

func userIndexHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceUserIndexArgs)
	realResult := result.(*user.UserServiceUserIndexResult)
	success, err := handler.(user.UserService).UserIndex(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceUserIndexArgs() interface{} {
	return user.NewUserServiceUserIndexArgs()
}

func newUserServiceUserIndexResult() interface{} {
	return user.NewUserServiceUserIndexResult()
}

func addFollowCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceAddFollowCountArgs)
	realResult := result.(*user.UserServiceAddFollowCountResult)
	success, err := handler.(user.UserService).AddFollowCount(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceAddFollowCountArgs() interface{} {
	return user.NewUserServiceAddFollowCountArgs()
}

func newUserServiceAddFollowCountResult() interface{} {
	return user.NewUserServiceAddFollowCountResult()
}

func subFollowCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceSubFollowCountArgs)
	realResult := result.(*user.UserServiceSubFollowCountResult)
	success, err := handler.(user.UserService).SubFollowCount(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceSubFollowCountArgs() interface{} {
	return user.NewUserServiceSubFollowCountArgs()
}

func newUserServiceSubFollowCountResult() interface{} {
	return user.NewUserServiceSubFollowCountResult()
}

func getUserListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceGetUserListArgs)
	realResult := result.(*user.UserServiceGetUserListResult)
	success, err := handler.(user.UserService).GetUserList(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetUserListArgs() interface{} {
	return user.NewUserServiceGetUserListArgs()
}

func newUserServiceGetUserListResult() interface{} {
	return user.NewUserServiceGetUserListResult()
}

func addUserWorkCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceAddUserWorkCountArgs)
	realResult := result.(*user.UserServiceAddUserWorkCountResult)
	success, err := handler.(user.UserService).AddUserWorkCount(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceAddUserWorkCountArgs() interface{} {
	return user.NewUserServiceAddUserWorkCountArgs()
}

func newUserServiceAddUserWorkCountResult() interface{} {
	return user.NewUserServiceAddUserWorkCountResult()
}

func updateUserFavoriteCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceUpdateUserFavoriteCountArgs)
	realResult := result.(*user.UserServiceUpdateUserFavoriteCountResult)
	success, err := handler.(user.UserService).UpdateUserFavoriteCount(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceUpdateUserFavoriteCountArgs() interface{} {
	return user.NewUserServiceUpdateUserFavoriteCountArgs()
}

func newUserServiceUpdateUserFavoriteCountResult() interface{} {
	return user.NewUserServiceUpdateUserFavoriteCountResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Register(ctx context.Context, request *user.RegisterRequest) (r *user.RegisterResponse, err error) {
	var _args user.UserServiceRegisterArgs
	_args.Request = request
	var _result user.UserServiceRegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Login(ctx context.Context, request *user.LoginRequest) (r *user.LoginResponse, err error) {
	var _args user.UserServiceLoginArgs
	_args.Request = request
	var _result user.UserServiceLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserIndex(ctx context.Context, request *user.UserIndexRequest) (r *user.UserIndexResponse, err error) {
	var _args user.UserServiceUserIndexArgs
	_args.Request = request
	var _result user.UserServiceUserIndexResult
	if err = p.c.Call(ctx, "UserIndex", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddFollowCount(ctx context.Context, request *user.AddFollowCountRequest) (r *user.AddFollowCountResponse, err error) {
	var _args user.UserServiceAddFollowCountArgs
	_args.Request = request
	var _result user.UserServiceAddFollowCountResult
	if err = p.c.Call(ctx, "AddFollowCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SubFollowCount(ctx context.Context, request *user.SubFollowCountRequest) (r *user.SubFollowCountResponse, err error) {
	var _args user.UserServiceSubFollowCountArgs
	_args.Request = request
	var _result user.UserServiceSubFollowCountResult
	if err = p.c.Call(ctx, "SubFollowCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserList(ctx context.Context, request *user.GetUserListRequest) (r *user.GetUserListResponse, err error) {
	var _args user.UserServiceGetUserListArgs
	_args.Request = request
	var _result user.UserServiceGetUserListResult
	if err = p.c.Call(ctx, "GetUserList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddUserWorkCount(ctx context.Context, request *user.AddUserWorkCountRequest) (r *user.AddUserWorkCountResponse, err error) {
	var _args user.UserServiceAddUserWorkCountArgs
	_args.Request = request
	var _result user.UserServiceAddUserWorkCountResult
	if err = p.c.Call(ctx, "AddUserWorkCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateUserFavoriteCount(ctx context.Context, request *user.UpdateUserFavoriteCountRequest) (r *user.UpdateUserFavoriteCountResponse, err error) {
	var _args user.UserServiceUpdateUserFavoriteCountArgs
	_args.Request = request
	var _result user.UserServiceUpdateUserFavoriteCountResult
	if err = p.c.Call(ctx, "UpdateUserFavoriteCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
